// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: messages.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, content, created_at, updated_at, sender_id, room_id)
VALUES ($1, $2, timezone('utc', NOW()), timezone('utc', NOW()), $3, $4)
RETURNING id, content, created_at, updated_at, sender_id, room_id
`

type CreateMessageParams struct {
	ID       uuid.UUID
	Content  string
	SenderID uuid.UUID
	RoomID   uuid.UUID
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ID,
		arg.Content,
		arg.SenderID,
		arg.RoomID,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SenderID,
		&i.RoomID,
	)
	return i, err
}

const getMessagesByRoom = `-- name: GetMessagesByRoom :many
SELECT id, content, created_at, updated_at, sender_id, room_id FROM messages WHERE room_id = $1
`

func (q *Queries) GetMessagesByRoom(ctx context.Context, roomID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SenderID,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByRoomAndUser = `-- name: GetMessagesByRoomAndUser :many
SELECT id, content, created_at, updated_at, sender_id, room_id FROM messages WHERE room_id = $1 AND sender_id = $2
`

type GetMessagesByRoomAndUserParams struct {
	RoomID   uuid.UUID
	SenderID uuid.UUID
}

func (q *Queries) GetMessagesByRoomAndUser(ctx context.Context, arg GetMessagesByRoomAndUserParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByRoomAndUser, arg.RoomID, arg.SenderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SenderID,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByUser = `-- name: GetMessagesByUser :many
SELECT id, content, created_at, updated_at, sender_id, room_id from messages
WHERE sender_id = $1
`

func (q *Queries) GetMessagesByUser(ctx context.Context, senderID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByUser, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SenderID,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPreviousRoomMessages = `-- name: GetPreviousRoomMessages :many
SELECT id, content, created_at, updated_at, sender_id, room_id FROM messages WHERE room_id = $1 ORDER BY created_at ASC LIMIT $2
`

type GetPreviousRoomMessagesParams struct {
	RoomID uuid.UUID
	Limit  int32
}

func (q *Queries) GetPreviousRoomMessages(ctx context.Context, arg GetPreviousRoomMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getPreviousRoomMessages, arg.RoomID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SenderID,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
